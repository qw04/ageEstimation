# -*- coding: utf-8 -*-
"""initialProject.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14jtTwpDdOxHaTPbS7kB2Y-aSIgftYmcY
"""

! pip install -q kaggle
from google.colab import files, output
files.upload()
! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json
! kaggle datasets list
import kaggle
! kaggle datasets download -d frabbisw/facial-age
! mkdir ageData1
! unzip facial-age.zip -d ageData1
! kaggle datasets download -d jangedoo/utkface-new
! mkdir ageData2
! unzip utkface-new.zip -d ageData2
! kaggle datasets download -d eshachakraborty00/all-age-face-dataset
! mkdir ageData3
! unzip all-age-face-dataset.zip -d ageData3
output.clear()

import math
import numpy as np
import os
import sys
import tensorflow as tf
from PIL import Image, features
from tqdm import tqdm
from google.colab import files, output
import cv2

'''
categories should be inclusive
'''

# categories = [[[x,x+1] for x in range(1, 110, 1)]] #define both sides inclusive boundaries for labels
categories = [[1,17],
              [18,1000]]
              # [21,26],
              # [27,35],
              # [36,50],
              # [51,63],
              # [64,110]
              # ] #manual definition 
#folder = int("")
#print(temp)

data_dir1 = "/content/ageData1/face_age"
data_dir2 = "/content/ageData2/UTKFace"
data_dir3 = "/content/ageData3/All-Age-Faces Dataset/original images"
EPOCHS = 20
IMG_WIDTH = 200
IMG_HEIGHT = 200
NUM_CATEGORIES = len(categories)
TEST_SIZE = 0.1
images = []
labels = []
names = []
file_name_counter = 0

augmentedFolder = "/content/drive/MyDrive/ComputingNea"
checkpoint_filepath = 'content/drive/MyDrive/checkpoint'

'''
takes in data from the face age dataset
'''
# anotherPath = "/content/drive/MyDrive/someImage.JPG"

another_useless_array = []
for folder in tqdm(os.listdir(data_dir1)):
  folder_path = os.path.join(data_dir1, folder)
  if os.path.isdir(folder_path) and folder != 'face_age':
    counter = 0
    while counter < len(categories):
      if categories[counter][0] <= int(folder) <= categories[counter][1]:
        temp = counter
        break
      counter += 1
    for file in os.listdir(folder_path):
      try:
        if folder != 'face_age':
          image = Image.open(os.path.join(folder_path, file))
          image = np.array(image)
          images.append(image)
          labels.append(temp)
      except Exception as e:
        print(f'{e}: {folder}')
        another_useless_array.append(folder)
        pass

another_useless_set = set(another_useless_array)
# output.clear()
print(another_useless_set)
#print(image[0])

'''
takes in data from the UTK face dataset
'''
# anotherPath = "/content/drive/MyDrive/someImage.JPG"
count = 0
another_useless_array = []
for randomFile in tqdm(os.listdir(data_dir2)):
  count+=1
  folder_path = os.path.join(data_dir2, randomFile)
  var = randomFile[:2]
  if not var.isdigit():
    var = var[0]
  counter = 0
  while counter < len(categories):
    if categories[counter][0] <= int(var) <= categories[counter][1]:
      temp = counter
      break
    counter += 1
  try:
    image = Image.open(folder_path)
    image = np.array(image)
    images.append(image)
    labels.append(temp)
    
  except Exception as e:
    another_useless_array.append(randomFile)
    pass


print(set(another_useless_array))
output.clear()

# anotherPath = "/content/drive/MyDrive/someImage.JPG"
useless_array = []
for randomFile in tqdm(os.listdir(data_dir3)):
  folder_path = os.path.join(data_dir3, randomFile)
  counter = 0
  while counter < len(categories):
    if categories[counter][0] <= int(randomFile[-6:-4]) <= categories[counter][1]:
      temp = counter
      break
    counter += 1
  try:
    image = Image.open(folder_path)
    image = np.array(image)
    images.append(temp)
    labels.append(temp)
    
  except Exception as e:
    useless_array.append(randomFile)
    pass

print(set(useless_array))
output.clear()

gpus = tf.config.list_physical_devices('GPU')
if gpus:
  # Restrict TensorFlow to only use the first GPU
  try:
    tf.config.set_visible_devices(gpus[0], 'GPU')
    logical_gpus = tf.config.list_logical_devices('GPU')
    print(len(gpus), "Physical GPUs,", len(logical_gpus), "Logical GPU")
  except RuntimeError as e:
    # Visible devices must be set before GPUs have been initialized
    print(e)

def get_model():
    """
    Returns a compiled convolutional neural network model. Assume that the
    `input_shape` of the first layer is `(IMG_WIDTH, IMG_HEIGHT, 3)`.
    The output layer should have `NUM_CATEGORIES` units, one for each category.
    """
    model = tf.keras.models.Sequential([
        tf.keras.layers.Conv2D(64, (3, 3), activation="sigmoid", input_shape=(IMG_WIDTH, IMG_HEIGHT, 3)),
        tf.keras.layers.MaxPooling2D(pool_size=(3, 3)),
        tf.keras.layers.Conv2D(64, (3, 3), activation="sigmoid"),
        tf.keras.layers.MaxPooling2D(pool_size=(3, 3)),
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(NUM_CATEGORIES * 64, activation="sigmoid"),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(NUM_CATEGORIES * 64, activation="sigmoid"),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(NUM_CATEGORIES * 64, activation="sigmoid"),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(NUM_CATEGORIES * 64, activation="sigmoid"),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(NUM_CATEGORIES * 64, activation="sigmoid"),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(NUM_CATEGORIES * 2, activation="sigmoid"),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(NUM_CATEGORIES, activation="sigmoid"),
    ])
    return model

model = get_model()

labels = tf.keras.utils.to_categorical(labels)

model.compile(
        optimizer="adam",
        loss="BinaryCrossentropy",
        metrics=["BinaryCrossentropy"],
    )

model_checkpoint_callback = tf.keras.callbacks.ModelCheckpoint(
    filepath=checkpoint_filepath,
    monitor='val_binary_crossentropy',
    mode='max',
    save_best_only=True)

model.fit(np.array(images),
          np.array(labels),
          epochs = EPOCHS,
          callbacks=[model_checkpoint_callback])

